name: Auto Deploy Preview

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  checks: read

jobs:
  signal:
    runs-on: ubuntu-latest
    steps:
      - name: Emit repository_dispatch to App
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "auto-deploy",
              client_payload: {
                base: context.payload.before,
                head: context.sha,
                branch: context.ref.replace("refs/heads/", ""),
                repo: `${context.repo.owner}/${context.repo.repo}`
              }
            })
      - name: Wait for World Forge check run
        uses: actions/github-script@v7
        with:
          script: |
            const name = "World Forge Auto-Deploy";
            const owner = context.repo.owner, repo = context.repo.repo, ref = context.sha;
            const initDeadline = Date.now() + 2*60*1000;
            const hardDeadline = Date.now() + 45*60*1000;
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            async function getRun() {
              const { data } = await github.rest.checks.listForRef({
              owner, repo, ref, check_name: name, filter: "latest", per_page: 100
              });
              // Debug: see what exists
              core.info(JSON.stringify(data.check_runs.map(c => ({
                id: c.id, name: c.name, head_sha: c.head_sha, status: c.status, conclusion: c.conclusion, app: c.app?.slug
              })), null, 2));
              return data.check_runs.find(c => c.name === name && c.head_sha === ref);
            }

            while (Date.now() < initDeadline) {
              if (await getRun()) break;
              await sleep(5000);
            }
            const initial = await getRun();
            if (!initial) {
              core.setFailed("Auto-deploy app did not initialize (no matching check run for this SHA).");
              return;
            }

            while (Date.now() < hardDeadline) {
              const run = await getRun();
              if (run?.status === "completed") {
                if (run.conclusion !== "success") core.setFailed(run.output?.summary || "Auto-deploy failed");
                return;
              }
              await sleep(10000);
            }
            core.setFailed("Timed out waiting for auto-deploy result.");