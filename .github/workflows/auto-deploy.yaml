name: Auto Deploy Preview

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  statuses: read

jobs:
  signal:
    runs-on: ubuntu-latest
    steps:
      - name: Emit repository_dispatch to App
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "auto-deploy",
              client_payload: {
                base: context.payload.before,
                head: context.sha,
                branch: context.ref.replace("refs/heads/", ""),
                repo: `${context.repo.owner}/${context.repo.repo}`
              }
            })
      - name: Wait for World Forge status
        uses: actions/github-script@v7
        with:
          script: |
            const prefix = "world-forge/auto-deploy";
            const owner = context.repo.owner, repo = context.repo.repo, ref = context.sha;
            const initDeadline = Date.now() + 2*60*1000;   // 2m to see aggregate status
            const hardDeadline = Date.now() + 45*60*1000;  // 45m max runtime

            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            async function allStatuses() {
              const { data } = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref });
              return data.statuses || [];
            }

            // Phase 1: wait for aggregate status and parse expected count from description
            let expected = null;
            while (Date.now() < initDeadline) {
              const statuses = await allStatuses();
              // Bail early if aggregate context already reports failure
              const aggFail = statuses.find(s => s.context === prefix && (s.state === "failure" || s.state === "error"));
              if (aggFail) {
                core.setFailed(aggFail.description || "Auto-deploy aggregate failed");
                return;
              }
              // Look for any pending aggregate with a numeric description
              const aggs = statuses.filter(s => s.context === prefix && s.state === "pending");
              for (const a of aggs) {
                const n = parseInt(a.description || "0", 10);
                if (!Number.isNaN(n) && n > 0) { expected = n; break; }
              }
              if (expected) break;
              await sleep(5000);
            }
            if (!expected) {
              core.setFailed("Auto-deploy did not publish expected deployment count.");
              return;
            }
            core.info(`${expected} deploy${expected === 1 ? '' : 's'} ${expected === 1 ? 'is' : 'are'} in progress`);

            // Phase 2: wait for per-project contexts to complete
            while (Date.now() < hardDeadline) {
              const statuses = await allStatuses();
              const perProject = statuses.filter(s => s.context.startsWith(prefix + "/"));
              const success = perProject.filter(s => s.state === "success").length;
              const failed  = perProject.filter(s => s.state === "failure" || s.state === "error").length;
              core.info(`completed=${success+failed}/${expected} success=${success} failed=${failed}`);
              if (success + failed >= expected) {
                if (failed > 0) core.setFailed(`Deploy failures: ${failed}/${expected}`);
                return;
              }
              await sleep(10000);
            }
            core.setFailed("Timed out waiting for auto-deploy results.");
            
            