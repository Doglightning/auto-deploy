name: Auto Deploy Preview

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  statuses: read

jobs:
  signal:
    runs-on: ubuntu-latest
    steps:
      - name: Emit repository_dispatch to App
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: "auto-deploy",
              client_payload: {
                base: context.payload.before,
                head: context.sha,
                branch: context.ref.replace("refs/heads/", ""),
                repo: `${context.repo.owner}/${context.repo.repo}`
              }
            })
      - name: Wait for World Forge status
        uses: actions/github-script@v7
        with:
          script: |
            const contextName = "world-forge/auto-deploy";
            const owner = context.repo.owner, repo = context.repo.repo, ref = context.sha;
            const initDeadline = Date.now() + 30*1000;   // 2m to see the status appear
            const hardDeadline = Date.now() + 45*60*1000;  // 45m max runtime

            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            async function getStatus() {
              const { data } = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref });
              const s = data.statuses.find(s => s.context === contextName);
              if (s) core.info(`status=${s.state} desc=${s.description}`);
              return s;
            }

            // Phase 1: wait for the status to appear
            while (Date.now() < initDeadline) {
              const s = await getStatus();
              if (s) break;
              await sleep(5000);
            }
            // If the status never appeared, fail early
            {
              const s = await getStatus();
              if (!s) {
                core.setFailed("Auto-deploy app did not initialize (no commit status).");
                return;
              }
            }

            // Phase 2: wait for completion
            while (Date.now() < hardDeadline) {
              const s = await getStatus();
              if (s?.state === "success") return;
              if (s?.state === "failure" || s?.state === "error") {
                core.setFailed(s.description || "Auto-deploy failed");
                return;
              }
              await sleep(10000);
            }
            core.setFailed("Timed out waiting for auto-deploy result.");
            
            